//i want to kill myself aaaa
//Message by Dx: Nezy bober
//I cum cum on this API :)
//Nezy will come to your house!

#include <iostream>
#include <Windows.h>
#include <string>
#include <thread>
#include <vector>
#include <mutex>

#include "Lua.hpp"
#include "Callcheck.hpp"
#include "Compressor/include/xxhash.h"
#include "Compressor/include/zstd.h"
#include "Compiler/include/BytecodeBuilder.h"
#include "Compiler/include/Compiler.h"
#include "Luau-Core/include/lua.h"
#include "Luau-Core/include/luaconf.h"
#include "Luau-Core/include/lualib.h"


class bytecode_encoder_t : public Luau::BytecodeEncoder
{
    std::uint8_t encodeOp(const std::uint8_t opcode)
    {
        return opcode * 227;
    }
};


std::string compress(const std::string& data)
{
    std::string output = "RSB1";
    std::size_t dataSize = data.size();
    std::size_t maxSize = ZSTD_compressBound(dataSize);
    std::vector<char> compressed(maxSize);
    std::size_t compSize = ZSTD_compress(&compressed[0], maxSize, data.c_str(), dataSize, ZSTD_maxCLevel());
    output.append(reinterpret_cast<char*>(&dataSize), sizeof(dataSize));
    output.append(&compressed[0], compSize);
    std::uint32_t firstHash = XXH32(&output[0], output.size(), 42U);
    std::uint8_t hashedBytes[4];
    std::memcpy(hashedBytes, &firstHash, sizeof(firstHash));
    for (std::size_t i = 0; i < output.size(); ++i)
        output[i] ^= hashedBytes[i % 4] + i * 41U;
    return output;
}


namespace API
{
    int getgenv(uintptr_t rl)
    {
        lua_pushvalue((lua_State*)rl, LUA_GLOBALSINDEX);
        return 1;
    }


    int getreg(uintptr_t rl)
    {
        lua_pushvalue((lua_State*)rl, LUA_REGISTRYINDEX);
        return 1;
    }


    int getrenv(uintptr_t rl)
    {
        lua_pushvalue((lua_State*)LuaState::get_robloxstate(), LUA_GLOBALSINDEX);
        lua_xmove((lua_State*)LuaState::get_robloxstate(), (lua_State*)rl, 1);
        return 1;
    }


    int getrawmetatable(uintptr_t rl)
    {
        if (lua_type((lua_State*)rl, 1) == LUA_TTABLE || lua_type((lua_State*)rl, 1) == LUA_TUSERDATA)
        {
            lua_getmetatable((lua_State*)rl, 1);
            return 1;
        }
        return 0;
    }

    int setreadonly(uintptr_t rl)
    {
        lua_setreadonly((lua_State*)rl, 1, lua_toboolean((lua_State*)rl, 2));
        return 0;
    }


    int getnamecallmethod(uintptr_t rl)
    {
        if (auto method = *reinterpret_cast<uintptr_t*>(rl + 68))
        {
            lua_pushstring((lua_State*)rl, reinterpret_cast<const char*>(method + 20));
            return 1;
        }
        return 0;
    }


    int checkcaller(uintptr_t rl)
    {
        lua_pushboolean((lua_State*)rl, true);
        return 0;
    }


    int httpget(uintptr_t rl)
    {
        std::string url;
        url += lua_tostring((lua_State*)rl, 1);
        std::string content = HttpClient::download_string(url);
        lua_pushstring((lua_State*)rl, content.c_str());
        return 1;
    }


    int loadstring(uintptr_t rl)
    {
        size_t l = 0;
        bytecode_encoder_t enc;
        auto s = luaL_checklstring((lua_State*)rl, 1, &l);

        auto bytecode = Luau::compile(std::string(s, l), {}, {}, &enc);
        auto compressed = compress(bytecode);

        if (Addresses::r_luavm_load(rl, &compressed, "", 0) == 0)
            return 1;

        lua_pushnil((lua_State*)rl);
        lua_insert((lua_State*)rl, -2);
        return 2;
    }


    void registration(uintptr_t rl)
    {
        lua_pushcclosure((lua_State*)rl, (lua_CFunction)ConvertClosure((uintptr_t)getgenv), 0, 0);
        lua_setfield((lua_State*)rl, LUA_GLOBALSINDEX, "getgenv");

        lua_pushcclosure((lua_State*)rl, (lua_CFunction)ConvertClosure((uintptr_t)getreg), 0, 0);
        lua_setfield((lua_State*)rl, LUA_GLOBALSINDEX, "getreg");

        lua_pushcclosure((lua_State*)rl, (lua_CFunction)ConvertClosure((uintptr_t)getrenv), 0, 0);
        lua_setfield((lua_State*)rl, LUA_GLOBALSINDEX, "getrenv");

        lua_pushcclosure((lua_State*)rl, (lua_CFunction)ConvertClosure((uintptr_t)getrawmetatable), 0, 0);
        lua_setfield((lua_State*)rl, LUA_GLOBALSINDEX, "getrawmetatable");

        lua_pushcclosure((lua_State*)rl, (lua_CFunction)ConvertClosure((uintptr_t)getnamecallmethod), 0, 0);
        lua_setfield((lua_State*)rl, LUA_GLOBALSINDEX, "getnamecallmethod");

        lua_pushcclosure((lua_State*)rl, (lua_CFunction)ConvertClosure((uintptr_t)setreadonly), 0, 0);
        lua_setfield((lua_State*)rl, LUA_GLOBALSINDEX, "setreadonly");

        lua_pushcclosure((lua_State*)rl, (lua_CFunction)ConvertClosure((uintptr_t)checkcaller), 0, 0);
        lua_setfield((lua_State*)rl, LUA_GLOBALSINDEX, "checkcaller");

        lua_pushcclosure((lua_State*)rl, (lua_CFunction)ConvertClosure((uintptr_t)httpget), 0, 0);
        lua_setfield((lua_State*)rl, LUA_GLOBALSINDEX, "HttpGet");

        lua_pushcclosure((lua_State*)rl, (lua_CFunction)ConvertClosure((uintptr_t)loadstring), 0, 0);
        lua_setfield((lua_State*)rl, LUA_GLOBALSINDEX, "loadstring");
    }
}
