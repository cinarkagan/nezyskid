#include <iostream>
#include <Windows.h>
#include <string>
#include <thread>
#include <vector>


int ASLR(uintptr_t address)
{
	return address - 0x400000 + reinterpret_cast<uintptr_t>(GetModuleHandleA(0));
}

int ASLR2(uintptr_t address)
{
	return address + reinterpret_cast<uintptr_t>(GetModuleHandleA(0));
}


uintptr_t exthread;

namespace Addresses
{
	using r_luavm_load_t = uintptr_t(__fastcall*)(uintptr_t rl, std::string* source, const char* chunk, int env);
	r_luavm_load_t r_luavm_load = (r_luavm_load_t)(ASLR2(0x359BA0));


	using r_taskdefer_t = uintptr_t(__cdecl*)(uintptr_t rl);
	r_taskdefer_t r_taskdefer = (r_taskdefer_t)(ASLR2(0x3DFF20));


	using r_getscheduler_t = uintptr_t(__cdecl*)();
	r_getscheduler_t r_getscheduler = (r_getscheduler_t)(ASLR2(0x738CC0));


	using r_print_t = uintptr_t(__cdecl*)(int type, const char* source);
	r_print_t r_lua_print = (r_print_t)(ASLR2(0xCE99C0));
}


namespace Offsets
{
	const uintptr_t lua_state_top = 8;
	const uintptr_t lua_state_base = 16;
}


namespace Deobfuscation
{
	/*
	uintptr_t luastate(uintptr_t sc)
	{
		return (sc + 236) - *(uintptr_t*)(sc + 236); //u can find it in getstate
	}
	*/
	using luastate_t = std::uintptr_t(__thiscall*)(std::uintptr_t sc, int* nothing);
	luastate_t luastate = reinterpret_cast<luastate_t>(ASLR2(0x3A0FC0)); //easier dumping
}
