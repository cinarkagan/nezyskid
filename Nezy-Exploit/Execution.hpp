#include <iostream>
#include <Windows.h>
#include <string>
#include <thread>
#include <vector>
#include <mutex>

#include "API.hpp"


namespace LuaCodes
{
std::string httpgethook = R"--(
local gmt = getrawmetatable(game)
        local old = gmt.__namecall
        local _game = game
        setreadonly(gmt, false)
        gmt.__namecall = function(self, ...)
        if self == _game and getnamecallmethod() =='HttpGet' then
        return HttpGet(...)
        end
        return old(self, ...)
        end

    
    local gmt = getrawmetatable(game)
local oldi = gmt.__index
setreadonly(gmt, false)
local _game = game
gmt.__index = function(self, i)
    if self == _game and i == 'HttpGet' then
        return function(self, ...)
            return _game:HttpGet(...)
        end
    end
    return oldi(self, i)
end
)--";
}


namespace Execution
{
	void run_script(uintptr_t rl, std::string source)
	{
        bytecode_encoder_t enc;
        std::string bytecode = Luau::compile(source, {}, {}, &enc);
        if (bytecode.at(0) != 0)
        {
            std::string compressed = compress(bytecode);
            Addresses::r_luavm_load(rl, &compressed, "", 0);
            Addresses::r_taskdefer(rl);
            Lua::decrement_top(rl);
        }
        else
        {
            Addresses::r_lua_print(3, bytecode.c_str() + 1);
        }
	}

    bool init = false;

    void pipe()
    {
        std::string ScriptBuffer;
        char Buffer[999999];
        DWORD ReadWords;
        void* PipeHandle = CreateNamedPipe(TEXT("\\\\.\\pipe\\NezyPipe"), PIPE_ACCESS_DUPLEX | PIPE_TYPE_BYTE | PIPE_READMODE_BYTE, PIPE_WAIT, 1, 999999, 999999, NMPWAIT_USE_DEFAULT_WAIT, 0);
        while (true)
        {
            if (ConnectNamedPipe(PipeHandle, 0))
            {
                while (ReadFile(PipeHandle, Buffer, sizeof(Buffer) - 1, &ReadWords, 0))
                {
                    Buffer[ReadWords] = '\0';
                    ScriptBuffer.append(Buffer);
                }

                if (init == false)
                {
                    run_script(exthread, LuaCodes::httpgethook);
                    init = true;
                }

                run_script(exthread, ScriptBuffer);
                ScriptBuffer.clear();
            }
            DisconnectNamedPipe(PipeHandle);
        }
    }
}